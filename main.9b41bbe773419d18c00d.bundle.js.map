{"version":3,"file":"main.9b41bbe773419d18c00d.bundle.js","sources":["webpack:///./src/hooks/useAsyncJob.ts"],"sourcesContent":["import * as R from 'ramda';\nimport { useState } from 'react';\n\nconst useAsyncJob = <TParams, TData, TError>({\n  auto = false,\n  asyncJob,\n  initVariable,\n}: {\n  auto?: boolean;\n  asyncJob: (\n    variables: TParams,\n  ) => Promise<{\n    data?: TData;\n    error?: TError;\n    ok: boolean;\n  }>;\n  initVariable?: TParams;\n}) => {\n  type State = {\n    error: null | TError;\n    data: null | TData;\n    executing: boolean;\n    reexecuting: boolean;\n    executed: boolean;\n  };\n\n  const [\n    { error, data, executing, reexecuting, executed },\n    setState,\n  ] = useState<State>({\n    error: null,\n    data: null,\n    executing: false,\n    reexecuting: false,\n    executed: false,\n  });\n\n  const executeAsyncJob = async (variable: TParams) => {\n    setState(\n      R.evolve({\n        executing: executed ? R.F : R.T,\n        reexecuting: executed ? R.T : R.F,\n      }),\n    );\n\n    let asyncJobError;\n    let asyncJobData;\n    const asyncJobResult = await asyncJob(variable);\n\n    if (asyncJobResult) {\n      asyncJobData = asyncJobResult.data;\n      asyncJobError = asyncJobResult.error;\n\n      if (asyncJobData && asyncJobError) {\n        throw new Error(\n          'Some of your async job returned both \"data\" and \"error\" fields. An async job is either successful or failed.',\n        );\n      }\n\n      setState(R.evolve({\n        data: asyncJobData ? R.always(asyncJobData) : R.always(null),\n        error: asyncJobError ? R.always(asyncJobError) : R.always(null),\n        executing: R.F,\n        reexecuting: R.F,\n        executed: R.T,\n      }) as any);\n    }\n\n    return {\n      ok: !!asyncJobData,\n      ...asyncJobResult,\n    };\n  };\n\n  if (auto && !executed && !executing) {\n    executeAsyncJob(initVariable as any);\n  }\n\n  return {\n    error,\n    data,\n    executing,\n    reexecuting,\n    executed,\n    executeAsyncJob,\n  };\n};\n\nexport default useAsyncJob;\ntry {\n    // @ts-ignore\n    useAsyncJob.displayName = \"useAsyncJob\";\n    // @ts-ignore\n    useAsyncJob.__docgenInfo = { \"description\": \"\", \"displayName\": \"useAsyncJob\", \"props\": { \"auto\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"auto\", \"required\": false, \"type\": { \"name\": \"boolean\" } }, \"asyncJob\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"asyncJob\", \"required\": true, \"type\": { \"name\": \"(variables: TParams) => Promise<{ data?: TData; error?: TError; ok: boolean; }>\" } }, \"initVariable\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"initVariable\", \"required\": false, \"type\": { \"name\": \"TParams\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/hooks/useAsyncJob.ts#useAsyncJob\"] = { docgenInfo: useAsyncJob.__docgenInfo, name: \"useAsyncJob\", path: \"src/hooks/useAsyncJob.ts#useAsyncJob\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"],"mappings":"AAAA","sourceRoot":""}