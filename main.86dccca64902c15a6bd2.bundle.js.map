{"version":3,"file":"main.86dccca64902c15a6bd2.bundle.js","sources":["webpack:///./src/BasicCharts/AreaChart/AreaChart.tsx"],"sourcesContent":["import * as d3 from 'd3';\nimport * as React from 'react';\n\nconst { useRef, useEffect } = React;\n\nimport useAsyncJob from '../../hooks/useAsyncJob';\n\nconst width = window.innerWidth;\nconst height = 500;\nconst margin = { top: 20, right: 20, bottom: 30, left: 30 };\n\ntype Datum = {\n  date: Date;\n  close: number;\n};\n\nexport default () => {\n  const rootRef = useRef<HTMLDivElement>(null);\n\n  const dataFetch = useAsyncJob({\n    auto: true,\n    asyncJob: async () => {\n      try {\n        const data = await d3.csv(\n          'https://gist.githubusercontent.com/mbostock/14613fb82f32f40119009c94f5a46d72/raw/d0d70ffb7b749714e4ba1dece761f6502b2bdea2/aapl.csv',\n          d3.autoType,\n        );\n\n        console.log(data);\n\n        if (data) {\n          return { ok: true, data };\n        }\n\n        return { ok: false, error: 'Null data' };\n      } catch (error) {\n        return { ok: false, error };\n      }\n    },\n  });\n\n  useEffect(() => {\n    const rootEl = rootRef.current;\n    const data: any = dataFetch.data;\n\n    if (!rootEl || !data) {\n      return;\n    }\n\n    const svg = d3\n      .select(rootEl)\n      .append('svg')\n      .attr('viewBox', `0,0,${width},${height}`);\n\n    const x = d3\n      .scaleTime()\n      .domain(d3.extent(data as [Datum], d => d.date) as any)\n      .range([margin.left, width - margin.right]);\n\n    const xAxis = (g: d3.Selection<any, any, any, any>) =>\n      g.attr('transform', `translate(0,${height - margin.bottom})`).call(\n        d3\n          .axisBottom(x)\n          .ticks(width / 80)\n          .tickSizeOuter(0),\n      );\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, d3.max<Datum>(data, d => d.close as any) as any])\n      .nice()\n      .range([height - margin.bottom, margin.top]);\n\n    const yAxis = (g: d3.Selection<any, any, any, any>) =>\n      g\n        .attr('transform', `translate(${margin.left},0)`)\n        .call(d3.axisLeft(y))\n        .call(a => a.select('.domain').remove())\n        .call(a =>\n          a\n            .select('.tick:last-of-type text')\n            .clone()\n            .attr('x', 3)\n            .attr('text-anchor', 'start')\n            .attr('font-weight', 'bold')\n            .text('$ Close'),\n        );\n\n    console.log('y0', y(0));\n\n    const area = d3\n      .area()\n      .x((d: any) => x(d.date))\n      .y0(y(0))\n      .y1((d: any) => y(d.close));\n\n    const line = d3\n      .line()\n      .x((d: any) => x(d.date))\n      .y((d: any) => y(d.close));\n\n    svg\n      .append('path')\n      .datum(data as [Datum])\n      .attr('fill', 'steelblue')\n      .attr('d', area as any);\n\n    svg\n      .append('path')\n      .datum(data as [Datum])\n      .attr('stroke', 'orange')\n      .attr('stroke-width', 2)\n      .attr('fill', 'none')\n      .attr('d', line as any);\n\n    svg.append('g').call(xAxis);\n    svg.append('g').call(yAxis);\n\n    svg.node();\n  }, [dataFetch]);\n\n  return (\n    <div ref={rootRef}>{/* <button onClick={onClick}>Fetch</button> */}</div>\n  );\n};\n"],"mappings":"AAAA","sourceRoot":""}